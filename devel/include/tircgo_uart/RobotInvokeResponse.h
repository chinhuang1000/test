// Generated by gencpp from file tircgo_uart/RobotInvokeResponse.msg
// DO NOT EDIT!


#ifndef TIRCGO_UART_MESSAGE_ROBOTINVOKERESPONSE_H
#define TIRCGO_UART_MESSAGE_ROBOTINVOKERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace tircgo_uart
{
template <class ContainerAllocator>
struct RobotInvokeResponse_
{
  typedef RobotInvokeResponse_<ContainerAllocator> Type;

  RobotInvokeResponse_()
    : header()
    , is_legal_op(false)
    , is_arg_valid(false)
    , is_activated(false)
    , feedback()
    , error_code(0)  {
    }
  RobotInvokeResponse_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , is_legal_op(false)
    , is_arg_valid(false)
    , is_activated(false)
    , feedback(_alloc)
    , error_code(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _is_legal_op_type;
  _is_legal_op_type is_legal_op;

   typedef uint8_t _is_arg_valid_type;
  _is_arg_valid_type is_arg_valid;

   typedef uint8_t _is_activated_type;
  _is_activated_type is_activated;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _feedback_type;
  _feedback_type feedback;

   typedef int16_t _error_code_type;
  _error_code_type error_code;





  typedef boost::shared_ptr< ::tircgo_uart::RobotInvokeResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tircgo_uart::RobotInvokeResponse_<ContainerAllocator> const> ConstPtr;

}; // struct RobotInvokeResponse_

typedef ::tircgo_uart::RobotInvokeResponse_<std::allocator<void> > RobotInvokeResponse;

typedef boost::shared_ptr< ::tircgo_uart::RobotInvokeResponse > RobotInvokeResponsePtr;
typedef boost::shared_ptr< ::tircgo_uart::RobotInvokeResponse const> RobotInvokeResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tircgo_uart::RobotInvokeResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tircgo_uart::RobotInvokeResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tircgo_uart::RobotInvokeResponse_<ContainerAllocator1> & lhs, const ::tircgo_uart::RobotInvokeResponse_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.is_legal_op == rhs.is_legal_op &&
    lhs.is_arg_valid == rhs.is_arg_valid &&
    lhs.is_activated == rhs.is_activated &&
    lhs.feedback == rhs.feedback &&
    lhs.error_code == rhs.error_code;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tircgo_uart::RobotInvokeResponse_<ContainerAllocator1> & lhs, const ::tircgo_uart::RobotInvokeResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tircgo_uart

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tircgo_uart::RobotInvokeResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tircgo_uart::RobotInvokeResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tircgo_uart::RobotInvokeResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tircgo_uart::RobotInvokeResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tircgo_uart::RobotInvokeResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tircgo_uart::RobotInvokeResponse_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tircgo_uart::RobotInvokeResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "29b3e05f8f2e25ee96b6ef844e123ff0";
  }

  static const char* value(const ::tircgo_uart::RobotInvokeResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x29b3e05f8f2e25eeULL;
  static const uint64_t static_value2 = 0x96b6ef844e123ff0ULL;
};

template<class ContainerAllocator>
struct DataType< ::tircgo_uart::RobotInvokeResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tircgo_uart/RobotInvokeResponse";
  }

  static const char* value(const ::tircgo_uart::RobotInvokeResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tircgo_uart::RobotInvokeResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"bool is_legal_op\n"
"bool is_arg_valid\n"
"bool is_activated\n"
"int16[] feedback\n"
"int16 error_code\n"
" \n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::tircgo_uart::RobotInvokeResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tircgo_uart::RobotInvokeResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.is_legal_op);
      stream.next(m.is_arg_valid);
      stream.next(m.is_activated);
      stream.next(m.feedback);
      stream.next(m.error_code);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotInvokeResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tircgo_uart::RobotInvokeResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tircgo_uart::RobotInvokeResponse_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "is_legal_op: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_legal_op);
    s << indent << "is_arg_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_arg_valid);
    s << indent << "is_activated: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_activated);
    s << indent << "feedback[]" << std::endl;
    for (size_t i = 0; i < v.feedback.size(); ++i)
    {
      s << indent << "  feedback[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.feedback[i]);
    }
    s << indent << "error_code: ";
    Printer<int16_t>::stream(s, indent + "  ", v.error_code);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TIRCGO_UART_MESSAGE_ROBOTINVOKERESPONSE_H
